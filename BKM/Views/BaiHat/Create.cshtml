@model BKM.Models.BaiHat

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>BaiHat</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.TenBaiHat, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TenBaiHat, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TenBaiHat, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MaTheLoai, "MaTheLoai", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("MaTheLoai", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MaTheLoai, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MaKhuVuc, "MaKhuVuc", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="dropdown">
            <ul class="dropdown-menu">
                @foreach (var item in new SelectList(@ViewBag.MaKhuVuc, "Value",
                           "Text"))
                    {
                        <li><buttom class="tablink" onclick="openDrop(this, item.Value)" value=item.Value>item.Text</buttom></li>
                    }
            </ul>   
        </div>
                @*@Html.DropDownListFor(model => model.MaKhuVuc, ViewBag.MaKhuVuc, new { type = "buttom", @class = "tablink", onclick = "openDrop(this, 'this.value')" })*@
                @Html.ValidationMessageFor(model => model.MaKhuVuc, "", new { @class = "text-danger" })

            </div>
            <div id="0.0" class="tabcontent">12</div>
            <div id="0" class="tabcontent">34</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MaCaSi, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("MaCaSi", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MaCaSi, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MoTa, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MoTa, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MoTa, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.File, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.File, new { htmlAttributes = new { type = "File" } })
                @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
    <script>
        function openDrop(evt, value) {
            d
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(value).style.display = "block";
            evt.currentTarget.className += " active";
        }
        document.getElementById("1").click();
    </script>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}